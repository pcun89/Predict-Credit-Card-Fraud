import pytest
import pandas as pd
import numpy as np
from fraud_detection import loadAndPreprocessData, balanceDataset, trainAndEvaluateModel, tuneHyperparameters
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# Fixtures for sample data
@pytest.fixture
def sample_data():
    # Create a small synthetic dataset for testing
    data = {
        'Time': np.random.rand(100) * 100000,
        'Amount': np.random.rand(100) * 500,
    }

    # Add PCA-like features
    for i in range(1, 29):
        data[f'V{i}'] = np.random.randn(100)

    # Add imbalanced class labels (90 non-fraud, 10 fraud)
    data['Class'] = [0] * 90 + [1] * 10
    df = pd.DataFrame(data)
    return df

def test_load_and_preprocess_data(tmp_path, sample_data):
    file_path = tmp_path / "test.csv"
    sample_data.to_csv(file_path, index=False)

    X, y = loadAndPreprocessData(file_path)
    assert X.shape[0] == y.shape[0]
    assert 'Amount' in X.columns and 'Time' in X.columns
    assert np.isclose(X['Amount'].mean(), 0, atol=1)
    assert y.value_counts().sum() == 100

def test_balance_dataset(sample_data):
    X = sample_data.drop('Class', axis=1)
    y = sample_data['Class']
    
    X_resampled, y_resampled = balanceDataset(X, y)
    assert len(X_resampled) == len(y_resampled)
    assert y_resampled.tolist().count(0) == y_resampled.tolist().count(1)

def test_train_and_evaluate_model(sample_data, capsys):
    X = sample_data.drop('Class', axis=1)
    y = sample_data['Class']
    X_resampled, y_resampled = balanceDataset(X, y)
    X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.3, random_state=42)

    trainAndEvaluateModel(X_train, X_test, y_train, y_test)
    captured = capsys.readouterr()
    assert "Evaluation" in captured.out
    assert "precision" in captured.out

def test_tune_hyperparameters(sample_data):
    X = sample_data.drop('Class', axis=1)
    y = sample_data['Class']
    X_resampled, y_resampled = balanceDataset(X, y)
    X_train, _, y_train, _ = train_test_split(X_resampled, y_resampled, test_size=0.3, random_state=42)

    best_model = tuneHyperparameters(X_train, y_train)
    assert hasattr(best_model, "predict")
    assert hasattr(best_model, "feature_importances_")
